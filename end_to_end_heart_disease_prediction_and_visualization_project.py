# -*- coding: utf-8 -*-
"""end-to-end-heart-disease-prediction-and-visualization-project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uxqyRjGd9h-uE9PvNFYPgJN7U2_7H872

# **Predicting and Visualization of Heart Diseases**

## **Project Workflow**

This Google Collab Notebook checks wheather a person has Heart Disease or not by using different Python Libraries such as **Numpy**, **Pandas**, **Matplotlib** and **scikit-learn** and predicting the heart disease with the help of their medical conditions or attributes.

### **Approach**

**We are going to take the Following Approach**
1. Problem Definition
2. Required Data
3. Data Evaluation
4. Modelling

### **1. Problem Definition**

Given, In a Statement,
Their are given Parameters about a Patient, can we Predict wheater or not they have a Heart Disease.

### **2. Data Dictionary**

The following dataset we are using can be found in Cleavland data from Machine Learing Repository site   
- https://archive.ics.uci.edu/ml/datasets/heart+disease and from kaggle site   
- https://www.kaggle.com/datasets/sumaiyatasmeem/heart-disease-classification-dataset

### **3. Data Dictionary Evaluation**

If we can reach 80%+ accuracy in predicting whether or not a patient has heart disease or not during the proof of concept we are pursuing the project.

**Data Dictionary or Required Data**  

**The Following are the Data Dictionary given to Use**

1. **age**: Displays the age of the individual.

2. **sex**: Displays the gender of the individual using the following format :   
1 = male  
0 = female

3. **cp- Chest-pain type**: displays the type of chest-pain experienced by the individual using the following format :  
0 = typical angina  
1 = atypical angina   
2 = non — anginal pain   
3 = asymptotic

4. **trestbps**- Resting Blood Pressure: displays the resting blood pressure value of an individual in mmHg (unit). anything above 130-140 is typically cause for concern.

5. **chol**- Serum Cholestrol: displays the serum cholesterol in mg/dl (unit)

6. **fbs**- Fasting Blood Sugar: compares the fasting blood sugar value of an individual with 120mg/dl.  
If fasting blood sugar > 120mg/dl then : 1 (true)  
else : 0 (false) '>126' mg/dL signals diabetes

7. **restecg**- Resting ECG : displays resting electrocardiographic results  
0 = normal  
1 = having ST-T wave abnormality  
2 = left ventricular hyperthrophy

8. **thalach**- Max heart rate achieved : displays the max heart rate achieved by an individual.

9. **exang**- Exercise induced angina :  
1 = yes  
0 = no

10. **oldpeak**- ST depression induced by exercise relative to rest: displays the value which is an integer or float.

11. **slope**- Slope of the peak exercise ST segment :  
0 = upsloping: better heart rate with excercise (uncommon)  
1 = flat: minimal change (typical healthy heart)  
2 = downsloping: signs of unhealthy heart

12. **ca**- Number of major vessels (0–3) colored by flourosopy : displays the value as integer or float.

13. **thal** : Displays the thalassemia :  
1,3 = normal  
6 = fixed defect  
7 = reversible defect: no proper blood movement when excercising

14. **target** : Displays whether the individual is suffering from heart disease or not :  
1 = yes  
0 = no

## **Preparing our Tools**
"""

# Importing Numpy as np
import numpy as np

# Importing matplotlib as plt to visualize the data
import matplotlib.pyplot as plt

# Importing pandas as pd
import pandas as pd

# Importing train_test_split to train and split the Data
from sklearn.model_selection import train_test_split

# Importing Logistic Regression Model from sklearn.linear_model
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

import seaborn as sns

"""## **Viewing our Data**"""

# We read our heart_disease_data with the healp of read_csv
heart_data = pd.read_csv("/content/heart_disease_data.csv")

# head() shows the first 5 rows of the dataset
heart_data.head()

# this shows the given number of rows from top from the dataset
heart_data.head(10)

# tail() shows the last 5 rows for 
heart_data.tail()

# this shows the given number of rows from bottom from the dataset
heart_data.tail(10)

# ciewing our data
heart_data

# shape gives how many rows and columns are their in our dataset (rows, columns)
heart_data.shape

# info() shows information about about dataset
heart_data.info()

# isnull().sum() show is their any empty values in our dataset
heart_data.isnull().sum()

# shows more statistical data about our dataset
heart_data.describe()

# shows the value counts of target from our dataset
heart_data["target"].value_counts()

"""## **Splitting Data into X and y**"""

# splitting our data into X and y
# in X we store everything except target column
# in y we store only the target column
X = heart_data.drop(columns="target", axis=1)
y = heart_data["target"]

# Viewing both X and y data
X, y

# Viewing the X data
print(X)

# Viewing the y data
print(y)

# using train_test_split to split the X and y data to training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=2)

# viewing the shape of X, X_train and X_test
print(X.shape, X_train.shape, X_test.shape)

"""## **Visualization of Data (Finding Patterns)**"""

# plotting a bar graph for the patient who has heart disease or not
heart_data["target"].value_counts().plot(kind="bar", color=["red", "blue"]);

"""### **Heart Disease Frequency According to Gender**"""

# Heart Disease Frequency according to Gender
heart_data.sex.value_counts()

# Compare target column to sex column
pd.crosstab(heart_data.target, heart_data.sex)

# Create a Plot of crosstab
pd.crosstab(heart_data.target, heart_data.sex).plot(kind="bar", figsize=(10, 6), color=["yellow", "orange"])

# title shows the heading of the Plot
plt.title("Heart Disease Frequency for Different Genders")

# xlabel shows the data required below the plot
plt.xlabel("0 = No Heart Disease, 1 = Heart Disease")

# ylabel shows the data required in the side
plt.ylabel("Amount")

# legens shows the data required in the legend
plt.legend(["Female", "Male"])

# shows small ticks between the bars
plt.xticks(rotation=0);

"""### **Age vs Max Heart Rate for Heart Disease**"""

# Heart Disease Frequency accounding to Gender
df.thalach.value_counts()

# Creating another figure
plt.figure(figsize = (10,6))

# scatter with positive examples
# age where target is 1 and thalach where target is 1
plt.scatter(heart_data.age[heart_data.target==1],
            heart_data.thalach[heart_data.target==1], c="red")

# scatter with negative examples
# age where target is 0 and thalach where target is 0
plt.scatter(heart_data.age[heart_data.target==0],
            heart_data.thalach[heart_data.target==0], c="blue")

# Adding some helper information
plt.title("Heart Disease in Function of Age and Max Heart Rate")
plt.xlabel("Age")
plt.ylabel("Max Heart Rate")
plt.legend(["Heart Disease","No Heart Disease"]);

# Checking the Distribution of Age Column with Histogram
df.age.plot.hist();

"""### **Heart Disease Frequency per Chest Pain type**

**cp- Chest-pain type:** displays the type of chest-pain experienced by the individual using the following format : 
- 0 = typical angina 
-1 = atypical angina 
-2 = non — anginal pain 
-3 = asymptotic
"""

# creating a crosstab between different types of chest pain
pd.crosstab(heart_data.cp,heart_data.target)

# Make the Crosstab more visual
# making a bar plot between chest pain(cp) and target to make different types of chest pain more visible
pd.crosstab(heart_data.cp, heart_data.target).plot(kind="bar",
                                   figsize=(10, 6),
                                   color=["yellow", "red"])

# Add some Helper Text
plt.title("Heart Disease Frequency per Chest Pain")
plt.xlabel("Chest Pain Type")
plt.ylabel("Amount")
plt.legend(["No Heart Disease", "Heart Disease"])
plt.xticks(rotation=0);

"""### **Making a Co-relation Matrix**"""

heart_data.head()

# making a corelation matrix
heart_data.corr()

# making correlation matrix a little beautiful
corr_matrix = heart_data.corr()
fig, ax = plt.subplots(figsize=(15, 10))

# using heatmap from seaborn
ax = sns.heatmap(corr_matrix,
                 annot=True,
                 linewidth=0.5,
                 fmt=".2f",
                 cmap="RdYlGn");
bottom, top = ax.get_ylim()
ax.set_ylim(bottom + 0.5, top - 0.5)


# Negative Correlation: Relationship Between Two Variables in which one variable increases and the other variable Decreases

"""## **Model Selection and Fitting the Model**

### **Random Forest Classifier**
"""

model_rfc = RandomForestClassifier()

model_rfc.fit(X_train, y_train)

# Accuracy on the Training Data
# Predicting on X_train and storing it in variable named X_train_prediction
X_train_prediction_rfc = model_rfc.predict(X_train)
training_data_accuracy_rfc = accuracy_score(X_train_prediction_rfc, y_train)

# Accuracy on the Test Data
# predicting the accuracy on the test Data and storing it in variable X_test_prediction
X_test_prediction_rfc = model_rfc.predict(X_test)
test_data_accuracy_rfc = accuracy_score(X_test_prediction_rfc, y_test)

# printing the accuracy on test data
print("Accuracy on Test Data:", test_data_accuracy_rfc*100)

"""### **Logistic Regression Model**"""

# using the Logistic Regression model and storing it in variable known as model
model = LogisticRegression()

# Now using the Logistic Regression Model
# training the model with train datasets
model.fit(X_train, y_train)

# Accuracy on the Training Data
# Predicting on X_train and storing it in variable named X_train_prediction
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, y_train)

# printing the accuracy score
print("Accuracy on Training Data: ",training_data_accuracy*100)

# Accuracy on the Test Data
# predicting the accuracy on the test Data and storing it in variable X_test_prediction
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, y_test)

# printing the accuracy on test data
print("Accuracy on Test Data:", test_data_accuracy*100)

"""## **Predicting the Data**

We saw that Logistic Regression Model has higher Accuracy in Test Data with 81 so we will use the **Logistic Regression Model** to predict the Data.
"""

# We will give the input Data except the target to check wheather it person has heart disease or not
input_data = (57,1,0,130,131,0,1,115,1,1.2,1,1,3)

# Change the input Data to Numpy Array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the Numpy Arrayas we Predict for only one Instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print("The Person does not have Heart Disease")
else:
  print("The Person has Heart Disease")

"""#**-------------------END------------------------------------**"""